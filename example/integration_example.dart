/// Complete Integration Example for billing_templates Package
///
/// This file demonstrates how to integrate the billing_templates package
/// into a FlutterFlow application for generating invoice PDFs.
///
/// IMPORTANT: This package does NOT fetch data from Firestore. Your app
/// must fetch all required data before calling the adapters.

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:path_provider/path_provider.dart';

// Import the billing_templates package
// Note: You must add this to your pubspec.yaml first:
//
// dependencies:
//   billing_templates:
//     git:
//       url: https://github.com/Unity2Blender/billing_templates.git
//       ref: v1.0.0
//
import 'package:billing_templates/billing_templates.dart';

// Import your FlutterFlow struct definitions
// These would be generated by FlutterFlow in your actual app
// import '/backend/schema/structs/invoice_struct.dart';
// import '/backend/schema/structs/firm_config_struct.dart';

/// Example widget showing complete invoice PDF generation workflow
class InvoicePDFGeneratorExample extends StatefulWidget {
  final String invoiceId;
  final String firmId;

  const InvoicePDFGeneratorExample({
    Key? key,
    required this.invoiceId,
    required this.firmId,
  }) : super(key: key);

  @override
  State<InvoicePDFGeneratorExample> createState() =>
      _InvoicePDFGeneratorExampleState();
}

class _InvoicePDFGeneratorExampleState
    extends State<InvoicePDFGeneratorExample> {
  String? _selectedTemplate = 'mbbook_modern';
  InvoiceColorTheme? _selectedTheme = InvoiceThemes.blue;
  bool _isLoading = false;
  String? _statusMessage;

  @override
  void initState() {
    super.initState();
    _listAvailableTemplates();
  }

  /// List all available templates and their capabilities
  void _listAvailableTemplates() {
    final templates = TemplateRegistry.getAllTemplates();
    print('=== Available Templates ===');
    for (var template in templates) {
      print('ID: ${template.id}');
      print('Name: ${template.name}');
      print('Description: ${template.description}');
      print('Supports Color Themes: ${template.supportsColorThemes}');
      print('---');
    }
  }

  /// Complete workflow: Fetch data → Convert → Generate PDF
  Future<void> _generateInvoicePDF() async {
    setState(() {
      _isLoading = true;
      _statusMessage = 'Fetching invoice data...';
    });

    try {
      // ==================================================================
      // STEP 1: FETCH DATA FROM FIRESTORE (YOUR APP'S RESPONSIBILITY)
      // ==================================================================

      final uid = FirebaseAuth.instance.currentUser!.uid;

      // Fetch invoice document with ALL nested data
      setState(() => _statusMessage = 'Fetching invoice...');

      final invoiceDoc = await FirebaseFirestore.instance
          .collection('billing')
          .doc(uid)
          .collection('invoices')
          .doc(widget.invoiceId)
          .get();

      if (!invoiceDoc.exists) {
        throw Exception('Invoice not found: ${widget.invoiceId}');
      }

      // Convert to struct (this is where FlutterFlow's generated code comes in)
      // In your actual app, you would use:
      // final invoice = InvoiceStruct.fromMap(invoiceDoc.data()!);
      //
      // For this example, we'll use dynamic:
      final invoiceData = invoiceDoc.data()!;
      print('Invoice fetched: ${invoiceData['modeSpecifcDetails']?['modeId']}');

      // Fetch firm document with ALL nested data
      setState(() => _statusMessage = 'Fetching firm details...');

      final firmDoc = await FirebaseFirestore.instance
          .collection('billing')
          .doc(uid)
          .collection('firms')
          .doc(widget.firmId)
          .get();

      if (!firmDoc.exists) {
        throw Exception('Firm not found: ${widget.firmId}');
      }

      // Convert to struct
      // In your actual app: final firm = FirmConfigStruct.fromMap(firmDoc.data()!);
      final firmData = firmDoc.data()!;
      print('Firm fetched: ${firmData['businessDetails']?['businessName']}');

      // ==================================================================
      // STEP 2: CONVERT USING ADAPTER (PACKAGE'S RESPONSIBILITY)
      // ==================================================================

      setState(() => _statusMessage = 'Converting data...');

      // The adapter handles conversion from FlutterFlow structs to internal models
      // In your actual app with proper struct types:
      /*
      final convertedInvoice = InvoiceAdapter.fromFlutterFlowStruct(
        invoice: invoice,        // InvoiceStruct
        sellerFirm: firm,        // FirmConfigStruct
      );
      */

      // For this example, we'll demonstrate the concept:
      // NOTE: In production, you MUST use actual struct types

      // This is a placeholder - replace with actual adapter call
      print('Adapter would convert: invoice + firm → InvoiceData');

      // ==================================================================
      // STEP 3: GENERATE PDF (PACKAGE'S RESPONSIBILITY)
      // ==================================================================

      setState(() => _statusMessage = 'Generating PDF...');

      // Check if template supports color themes
      final template = TemplateRegistry.getTemplate(_selectedTemplate!);
      final effectiveTheme = template.supportsColorThemes ? _selectedTheme : null;

      // Generate PDF bytes
      // In your actual app with proper conversion:
      /*
      final pdfBytes = await PDFService().generatePDF(
        invoice: convertedInvoice,
        templateId: _selectedTemplate!,
        colorTheme: effectiveTheme,
      );
      */

      // For this example, we'll show the intended usage:
      print('PDF would be generated with:');
      print('  Template: $_selectedTemplate');
      print('  Theme: ${effectiveTheme?.name ?? 'none'}');

      // ==================================================================
      // STEP 4: USE THE PDF (YOUR APP'S CHOICE)
      // ==================================================================

      setState(() => _statusMessage = 'PDF generated! Choose action...');

      // Option A: Save to file
      // await _savePDFToFile(pdfBytes);

      // Option B: Print
      // await PDFService().printInvoice(
      //   invoice: convertedInvoice,
      //   templateId: _selectedTemplate!,
      //   colorTheme: effectiveTheme,
      // );

      // Option C: Share
      // await PDFService().sharePDF(
      //   invoice: convertedInvoice,
      //   templateId: _selectedTemplate!,
      //   colorTheme: effectiveTheme,
      // );

      setState(() {
        _statusMessage = 'Success! PDF would be ready for print/share/save';
      });

    } catch (e, stackTrace) {
      print('Error generating PDF: $e');
      print('Stack trace: $stackTrace');

      setState(() {
        _statusMessage = 'Error: $e';
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to generate PDF: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// Save PDF bytes to local file
  Future<void> _savePDFToFile(List<int> pdfBytes) async {
    final directory = await getApplicationDocumentsDirectory();
    final fileName = 'invoice_${widget.invoiceId}_${DateTime.now().millisecondsSinceEpoch}.pdf';
    final file = File('${directory.path}/$fileName');

    await file.writeAsBytes(pdfBytes);
    print('PDF saved to: ${file.path}');

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('PDF saved to: $fileName')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Invoice PDF Generator'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Info card
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue.shade700),
                        SizedBox(width: 8),
                        Text(
                          'Invoice PDF Generator',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade900,
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Invoice ID: ${widget.invoiceId}',
                      style: TextStyle(fontSize: 14),
                    ),
                    Text(
                      'Firm ID: ${widget.firmId}',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 24),

            // Template selector
            DropdownButtonFormField<String>(
              value: _selectedTemplate,
              decoration: InputDecoration(
                labelText: 'Select Template',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.description),
              ),
              items: TemplateRegistry.getAllTemplates()
                  .map((template) => DropdownMenuItem(
                        value: template.id,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(template.name),
                            Text(
                              template.description,
                              style: TextStyle(fontSize: 12, color: Colors.grey),
                            ),
                          ],
                        ),
                      ))
                  .toList(),
              onChanged: (value) => setState(() => _selectedTemplate = value),
            ),
            SizedBox(height: 16),

            // Theme selector (conditional)
            if (_selectedTemplate != null &&
                TemplateRegistry.getTemplate(_selectedTemplate!)
                    .supportsColorThemes)
              DropdownButtonFormField<InvoiceColorTheme>(
                value: _selectedTheme,
                decoration: InputDecoration(
                  labelText: 'Color Theme',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.palette),
                ),
                items: InvoiceThemes.all
                    .map((theme) => DropdownMenuItem(
                          value: theme,
                          child: Row(
                            children: [
                              Container(
                                width: 20,
                                height: 20,
                                decoration: BoxDecoration(
                                  color: Color.fromARGB(
                                    255,
                                    (theme.primaryColor.red * 255).toInt(),
                                    (theme.primaryColor.green * 255).toInt(),
                                    (theme.primaryColor.blue * 255).toInt(),
                                  ),
                                  border: Border.all(color: Colors.grey),
                                ),
                              ),
                              SizedBox(width: 12),
                              Text(theme.name),
                            ],
                          ),
                        ))
                    .toList(),
                onChanged: (value) => setState(() => _selectedTheme = value),
              ),
            SizedBox(height: 32),

            // Status message
            if (_statusMessage != null)
              Card(
                color: Colors.grey.shade100,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Row(
                    children: [
                      if (_isLoading)
                        SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                      if (_isLoading) SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          _statusMessage!,
                          style: TextStyle(fontSize: 14),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            SizedBox(height: 16),

            // Generate button
            ElevatedButton.icon(
              onPressed: _isLoading ? null : _generateInvoicePDF,
              icon: Icon(Icons.picture_as_pdf),
              label: Text('Generate PDF'),
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(vertical: 16),
                textStyle: TextStyle(fontSize: 16),
              ),
            ),

            Spacer(),

            // Additional actions (when not loading)
            if (!_isLoading) ...[
              OutlinedButton.icon(
                onPressed: () {
                  // Show template info
                  final template =
                      TemplateRegistry.getTemplate(_selectedTemplate!);
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: Text(template.name),
                      content: Column(
                        mainAxisSize: MainAxisSize.min,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('Description:', style: TextStyle(fontWeight: FontWeight.bold)),
                          Text(template.description),
                          SizedBox(height: 8),
                          Text('Template ID: ${template.id}'),
                          Text('Supports Themes: ${template.supportsColorThemes ? "Yes" : "No"}'),
                        ],
                      ),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text('Close'),
                        ),
                      ],
                    ),
                  );
                },
                icon: Icon(Icons.info),
                label: Text('Template Info'),
              ),
            ],
          ],
        ),
      ),
    );
  }
}

/// Main entry point for testing
void main() {
  runApp(MaterialApp(
    title: 'Invoice PDF Generator Example',
    theme: ThemeData(primarySwatch: Colors.blue),
    home: InvoicePDFGeneratorExample(
      invoiceId: 'test_invoice_123',
      firmId: 'test_firm_456',
    ),
  ));
}
